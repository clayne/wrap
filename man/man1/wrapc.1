'\" t
.\"
.\"     wrapc -- comment reformatter
.\"     wrapc.1: manual page
.\"
.\"     Copyright (C) 1996-2024  Paul J. Lucas
.\"
.\"     This program is free software: you can redistribute it and/or modify
.\"     it under the terms of the GNU General Public License as published by
.\"     the Free Software Foundation, either version 3 of the License, or
.\"     (at your option) any later version.
.\"
.\"     This program is distributed in the hope that it will be useful,
.\"     but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"     GNU General Public License for more details.
.\"
.\"     You should have received a copy of the GNU General Public License
.\"     along with this program.  If not, see <http://www.gnu.org/licenses/>.
.\"
.\" ---------------------------------------------------------------------------
.\" define code-start macro
.de cS
.sp
.nf
.RS 5
.ft CW
..
.\" define code-end macro
.de cE
.ft 1
.RE
.fi
.if !'\\$1'0' .sp
..
.\" ---------------------------------------------------------------------------
.TH \f3wrapc\fP 1 "September 21, 2023" "PJL TOOLS"
.SH NAME
wrapc \- comment reformatter
.SH SYNOPSIS
.B wrapc
.BI [ options ]
.SH DESCRIPTION
.B wrapc
is a filter for reformatting source code comments
(or quoted e-mail)
by wrapping and filling lines to a given
.IR line-width ,
the default for which is 80 characters.
.P
The
.I characters
that are recognized
by default
as comment delimiters
and the non-exhaustive set of programming languages that use them
are the union of:
.P
.PD 0
.RS 5
.IP "\f(CW!\fP" 5
Fortran,
Simula
.IP "\f(CW#\fP"
AWK,
CMake,
Crystal,
Julia,
Make,
Nim,
Perl,
Python,
R,
Ruby,
Shell,
Tcl
.IP "\f(CW#=\fP"
Julia
.IP "\f(CW#|\fP"
Lisp,
Racket,
Scheme
.IP "\f(CW%\fP"
Erlang,
Matlab,
Metafont,
Octave,
PostScript,
Prolog,
TeX
.IP "\f(CW(*)\fP"
AppleScript,
Delphi,
Mathematica,
ML,
Modula-[23],
Oberon,
OCaml,
Pascal
.IP "\f(CW(:)\fP"
XQuery
.IP "\f(CW*>\fP"
COBOL 2002
.IP "\f(CW--\fP"
Ada,
AppleScript,
Eiffel,
Haskell,
Lua,
SQL
.IP "\f(CW/*\fP"
C,
Objective C,
C#,
C++,
Chapel,
D,
Dart,
Go,
Kotlin,
Java,
Maxima,
Pike,
PL/I,
Pure,
Rust,
Scala,
SQL,
Swift
.IP "\f(CW/+\fP"
D
.IP "\f(CW//\fP"
C,
Objective C,
C#,
C++,
Chapel,
D,
Dart,
F#,
Go,
Kotlin,
Java,
Pure,
Rust,
Scala,
Swift,
Zig
.IP "\f(CW;\fP"
Assembly,
Clojure,
Lisp,
Scheme
.IP "\f(CW<#>\fP"
PowerShell
.IP "\f(CW>\fP"
Quoted e-mail
.IP "\f(CW{}\fP"
Pascal
.IP "\f(CW{-}\fP"
Haskell
.IP "\f(CW\e\fP"
Forth
.RE
.PD
.P
Comments are formatted subject to the following:
.IP \[bu] 2
Comment characters are treated as such
only when they are the first
or last
non-whitespace characters on a line.
.IP \[bu]
Leading whitespace and comment delimiter characters
as well as trailing comment delimiter characters
of the first line
are used as the ``prototype'' for all lines.
.IP \[bu]
For each line,
all leading whitespace and comment delimiter characters
as well as all trailing comment delimiter characters
are stripped
before being passed to
.BR wrap (1)
for reformatting.
.IP \[bu]
After reformatting,
the prototype characters
of the first comment line
are prepended to the start
and appended to the end
of each line.
.SS Trailing Source Code Passthrough
If the first non-whitespace character of a subsequent line
is
.I not
a comment delimiter character,
it signals the end of the comment
and all remaining lines
are passed through unaltered.
For example, given:
.cS
# We want to resolve the symbolic link of ONLY src_path
# and not ALL the symbolic links in the entire path,
# hence we can't use realpath().
new_src_path = os.readlink( src_path )
.cE
.B wrapc
will reformat the first three lines,
but will not alter the fourth and remaining lines.
.SS Block Comments
Block comments,
for example:
.cS
/*
 * Reads the output of wrap(1) and prepends the leading
 * whitespace and comment characters back to each line.
 */
static void read_wrap( void ) {
.cE
are treated specially in that:
.IP \[bu] 2
The first line is not altered
if it only contains any number of non-alphabetic characters.
.IP \[bu]
Leading whitespace and comment delimiter characters of the
.I second
line are used as the ``prototype'' for all remaining comment lines.
.IP \[bu]
The last comment line,
the one only containing any number of non-alphabetic characters,
and any subsequent lines are also not altered.
.SS Boxed Comments
Boxed comments, for example:
.cS
/********************************************************/
/* Lorem ipsum dolor sit amet, ligula suspendisse nulla */
/* pretium, rhoncus tempor fermentum, enim integer ad   */
/* vestibulum volutpat.                                 */
/********************************************************/
.cE
where every line is ended by a comment delimiter
and the delimiters are aligned to form a ``box,''
are treated specially in that:
.IP \[bu] 2
If composed of only comment delimiter characters,
the first and last lines are either lengthened or shortened to
.I line-width
(see the
.B \-\-width
or
.B \-w
option).
.IP \[bu]
The trailing comment delimiter characters on every line
are all vertically aligned at
.IR line-width .
.SS Doxygen Commands
If either the
.B \-\-doxygen
or
.B \-x
option is specified,
exceptions are made
in order to pretty-print Doxygen commands within comments.
A Doxygen command
is either a \f(CW\\\fP or \f(CW@\fP character
followed by one of the following:
.PD
.RS 5
.TS
tab(|) ;
l l l
l l l .
\f(CWa\fP|I|
\f(CWaddindex\fP|E|
\f(CWaddtogroup\fP|E|
\f(CWanchor\fP|I|
\f(CWarg\fP|P|
\f(CWattention\fP|P|
\f(CWauthor\fP|P|
\f(CWauthors\fP|P|
\f(CWb\fP|I|
\f(CWbrief\fP|P|
\f(CWbug\fP|P|
\f(CWc\fP|I|
\f(CWcallergraph\fP|E|
\f(CWcallgraph\fP|E|
\f(CWcategory\fP|E|
\f(CWcite\fP|E|
\f(CWclass\fP|E|
\f(CWcode\fP|V|\f(CWendcode\fP
\f(CWcond\fP|P|\f(CWendcond\fP
\f(CWcopybrief\fP|B|
\f(CWcopydetails\fP|B|
\f(CWcopydoc\fP|B|
\f(CWcopyright\fP|P|
\f(CWdate\fP|P|
\f(CWdef\fP|E|
\f(CWdefgroup\fP|E|
\f(CWdeprecated\fP|P|
\f(CWdetails\fP|P|
\f(CWdiafile\fP|E|
\f(CWdir\fP|E|
\f(CWdocbookonly\fP|V|\f(CWenddocbookonly\fP
\f(CWdontinclude\fP|E|
\f(CWdot\fP|V|\f(CWenddot\fP
\f(CWdotfile\fP|E|
\f(CWe\fP|I|
\f(CWelse\fP|E|
\f(CWelseif\fP|E|
\f(CWem\fP|I|
\f(CWendcode\fP|E|
\f(CWendcond\fP|E|
\f(CWenddocbookonly\fP|E|
\f(CWenddot\fP|E|
\f(CWendhtmlonly\fP|E|
\f(CWendif\fP|E|
\f(CWendinternal\fP|E|
\f(CWendlatexonly\fP|E|
\f(CWendlink\fP|E|
\f(CWendmanonly\fP|E|
\f(CWendmsc\fP|E|
\f(CWendparblock\fP|E|
\f(CWendrtfonly\fP|E|
\f(CWendsecreflist\fP|E|
\f(CWenduml\fP|E|
\f(CWendverbatim\fP|E|
\f(CWendxmlonly\fP|E|
\f(CWenum\fP|I|
\f(CWexample\fP|E|
\f(CWexception\fP|P|
\f(CWextends\fP|I|
\f(CWf$\fP|I|
\f(CWf[\fP|V|\f(CWf]\fP
\f(CWf]\fP|E|
\f(CWfile\fP|E|
\f(CWfn\fP|E|
\f(CWf{\fP|V|\f(CWf}\fP
\f(CWf}\fP|E|
\f(CWheaderfile\fP|E|
\f(CWhidecallergraph\fP|E|
\f(CWhidecallgraph\fP|E|
\f(CWhideinitializer\fP|E|
\f(CWhiderefby\fP|E|
\f(CWhiderefs\fP|E|
\f(CWhtmlinclude\fP|E|
\f(CWhtmlonly\fP|P|\f(CWendhtmlonly\fP
\f(CWidlexcept\fP|E|
\f(CWif\fP|E|
\f(CWifnot\fP|E|
\f(CWimage\fP|E|
\f(CWimplements\fP|E|
\f(CWinclude\fP|E|
\f(CWincludedoc\fP|E|
\f(CWincludelineno\fP|E|
\f(CWingroup\fP|E|
\f(CWinterface\fP|E|
\f(CWinternal\fP|E|
\f(CWinvariant\fP|P|
\f(CWlatexinclude\fP|E|
\f(CWlatexonly\fP|V|\f(CWendlatexonly\fP
\f(CWli\fP|P|
\f(CWline\fP|E|
\f(CWlink\fP|I|
\f(CWmainpage\fP|E|
\f(CWmanonly\fP|V|\f(CWmanonly\fP
\f(CWmemberof\fP|E|
\f(CWmsc\fP|V|\f(CWendmsc\fP
\f(CWmscfile\fP|E|
\f(CWn\fP|E|
\f(CWname\fP|E|
\f(CWnamespace\fP|E|
\f(CWnosubgrouping\fP|E|
\f(CWnote\fP|P|
\f(CWoverload\fP|E|
\f(CWp\fP|I|
\f(CWpackage\fP|E|
\f(CWpage\fP|E|
\f(CWpar\fP|P|
\f(CWparagraph\fP|E|
\f(CWparam\fP|P|
\f(CWparblock\fP|E|\f(CWendparblock\fP
\f(CWpost\fP|P|
\f(CWpre\fP|P|
\f(CWprivate\fP|E|
\f(CWprivatesection\fP|E|
\f(CWproperty\fP|E|
\f(CWprotected\fP|E|
\f(CWprotectedsection\fP|E|
\f(CWprotocol\fP|E|
\f(CWpublic\fP|E|
\f(CWpublicsection\fP|E|
\f(CWpure\fP|B|
\f(CWref\fP|I|
\f(CWrefitem\fP|I|
\f(CWrelated\fP|E|
\f(CWrelatedalso\fP|E|
\f(CWrelates\fP|E|
\f(CWrelatesalso\fP|E|
\f(CWremark\fP|P|
\f(CWremarks\fP|P|
\f(CWresult\fP|P|
\f(CWreturn\fP|P|
\f(CWreturns\fP|P|
\f(CWretval\fP|P|
\f(CWrtfonly\fP|P|\f(CWendrtfonly\fP
\f(CWsa\fP|E|
\f(CWsecreflist\fP|E|
\f(CWsection\fP|E|
\f(CWsee\fP|P|
\f(CWshort\fP|P|
\f(CWshowinitializer\fP|E|
\f(CWshowrefby\fP|E|
\f(CWshowrefs\fP|E|
\f(CWsince\fP|P|
\f(CWskip\fP|E|
\f(CWskipline\fP|E|
\f(CWsnippet\fP|E|
\f(CWsnippetdoc\fP|E|
\f(CWsnippetlineno\fP|E|
\f(CWstartuml\fP|V|\f(CWenduml\fP
\f(CWstruct\fP|I|
\f(CWsubpage\fP|E|
\f(CWsubsection\fP|E|
\f(CWsubsubsection\fP|E|
\f(CWtableofcontents\fP|E|
\f(CWtest\fP|P|
\f(CWthrow\fP|P|
\f(CWthrows\fP|P|
\f(CWtodo\fP|P|
\f(CWtparam\fP|P|
\f(CWtypedef\fP|E|
\f(CWunion\fP|E|
\f(CWuntil\fP|E|
\f(CWvar\fP|E|
\f(CWverbatim\fP|V|\f(CWendverbatim\fP
\f(CWverbinclude\fP|E|
\f(CWversion\fP|P|
\f(CWvhdlflow\fP|E|
\f(CWwarning\fP|P|
\f(CWweakgroup\fP|E|
\f(CWxmlonly\fP|V|\f(CWendxml\fP
\f(CWxrefitem\fP|P|
\f(CW{\fP|E|
\f(CW}\fP|E|
.TE
.RE
.P
The second column specifies how the command is formatted:
.P
.PD 0
.RS 5
.IP "\f3B\fP" 5
Force the command to the beginning of the line.
Text wraps normally immediately after the command name.
.IP "\f3E\fP"
Same as
.BR B ,
but the command goes to the end of the line.
Text wraps normally starting on the next line.
.IP "\f3I\fP"
The command is inline.
Text wraps normally.
.IP "\f3P\fP"
Same as
.BR B .
.IP "\f3V\fP"
Same as
.BR P ,
but begins passing preformatted text through verbatim
until the command's corresponding end command
(given in the third column)
is encountered.
.RE
.PD
.SS Markdown Text
If either the
.B \-\-markdown
or
.B \-u
option is specified,
exceptions are made
in order to pretty-print Markdown text
within comments
(see
.B MARKDOWN FORMATTING
in
.BR wrap (1)).
.SS Non-Comments
When not aligning end-of-line comments via the
.B \-\-align-column
or
.B \-A
option,
if the first non-whitespace character
of the first line
is
.I not
a comment delimiter character,
then whatever leading whitespace alone, if any,
is used as the prototype for all lines.
.SS End-of-Line Comment Aligning
When using the
.B \-\-align-column
or
.B \-A
option,
comments at the ends of lines
are aligned at a given column.
For example, given:
.cS
DELIM_EOL,      // e.g., "#" or "//" (to end-of-line)
DELIM_SINGLE, // e.g., "{" (Pascal)
DELIM_DOUBLE,     // e.g., "/*" (but not "//")
.cE
the comments would all be aligned at the same column
by either inserting or deleting whitespace
before each comment.
If enough whitespace is inserted
such that the comment is longer than
.IR line-width ,
the comment is
.I not
wrapped.
.P
A comment is aligned only if:
.nr step 1 1
.IP \n[step]. 3
It is the last thing on the line
\(em so a comment within a line is not aligned,
e.g.:
.cS
char cc_buf[ 3 + 1/*null*/ ];
.cE 0
.IP \n+[step].
There is more than one ``token'' on the line before the comment
\(em so comments like:
.cS
    } // for
#endif /* NDEBUG */
.cE 0
.IP
are not aligned.
A ``token'' is one of:
.P
.PD 0
.RS 5
.IP \[bu] 2
A ``word'':
an optional \f(CW#\fP
followed by one or more alpha-numeric characters.
.IP \[bu]
A single punctuation character
.IP \[bu]
A single- or-double-quoted string.
.RE
.PD
.P
An end-of-line comment that does not meet these criteria
is passed through verbatim
(except that the line-ending
is replaced by whatever the chosen line-ending is).
.SH OPTIONS
An option argument
.I f
means
.IR file ,
.I n
means
.IR "unsigned integer" ,
and
.I s
means
.IR string .
.TP 5
.BI \-\-alias \f1=\fPs "\f1 | \fP" "" \-a " s"
Specifies the alias name
.I s
from the configuration file to be used.
This overrides any alias
from a matched pattern
via the
.BR \-\-file ,
.BR \-f ,
.BR \-\-file-name ,
or
.B \-F
options.
.TP
.BI \-\-align-column \f1=\fPn [[,] s ] "\f1 | \fP" \-A " n" [[,] s ]
Aligns end-of-line comments at column
.I n
by either inserting or deleting whitespace
before each comment.
.IP
The optional alignment character specifier
.I s
is one of:
.RS
.TP 11
.BR a " | " auto
Uses the first whitespace character
after the last non-whitespace character
before the comment.
For example, given:
.cS
          static char const SEP = '/'; // path separator
.cE 0
.IP
the first whitespace character
after the last non-whitespace character
before the comment
is the character after `\f(CW;\fP'.
.IP
If there is no such character,
uses the last whitespace character encountered.
If no whitespace character was encountered,
uses a space.
Whitespace within quoted strings
is never considered.
.TP
.BR s " | " space  " | " spaces
Replaces all whitespace characters
between the last non-whitespace character before the comment
and the comment,
if any,
with spaces.
.TP
.BR t " | " tab " | " tabs
Replaces all whitespace characters
between the last non-whitespace character before the comment
and the comment,
if any,
with tabs.
However,
if
.I n
doesn't fall on a tab-stop
based on the current value of
.I tab-spaces
(see the
.B \-\-tab-spaces
or
.B \-s
option),
then the last tab is replaced by spaces
such that the comment is aligned at column
.IR n .
.RE
.IP
The default is
.BR auto .
.IP
Since false-positive
comment delimiter characters
can more easily occur on lines containing code,
it's better to specify
only the needed language-specific
comment delimiter characters
via the
.B \-\-comment-chars
or
.B \-D
options.
.TP
.BI \-\-block-regex \f1=\fPs "\f1 | \fP" "" \-b " s"
Specifies a ``block'' regular expression
.I s
that,
when the first non-whitespace character on a line
matches the regular expression,
delimits a paragraph.
(The regular expression effectively has \f(CW^[ \\t]*\fP prepended.)
.TP
.BI \-\-comment-chars \f1=\fPs "\f1 | \fP" "" \-D " s"
Specifies the set of comment delimiter characters
.I s
overriding the default.
Only punctuation characters
(those for which
.BR ispunct (3)
returns non-zero)
are allowed.
.IP
Comment delimiters are specified by either one or two characters,
e.g.,
\f(CW#\fP,
\f(CW//\fP,
\f(CW/*\fP,
i.e., whatever comment delimiter character(s) are used
by a particular programming language.
.IP
Multiple delimiters are separated by either commas or whitespace.
Specifying any of the characters
\f(CW(<[{\fP
automatically includes their respective closing characters
\f(CW)>]}\fP.
.TP
.BI \-\-config \f1=\fPf "\f1 | \fP" "" \-c " f"
Specifies the configuration file
.I f
to read
(default is
.BR ~/.wraprc )
if warranted.
.TP
.BR \-\-doxygen " | " \-x
Formats text containing Doxygen commands.
(May be combined with either the
.B \-\-markdown
or
.B \-u
option.)
.TP
.BI \-\-eol \f1=\fPs "\f1 | \fP" "" \-l " s"
Specifies the line-endings to use
.IR s ,
one of
\f(CW-\fP,
\f(CWi\fP,
or
\f(CWinput\fP
(whatever the input uses, the default);
\f(CWcrlf\fP,
\f(CWd\fP,
\f(CWdos\fP,
\f(CWw\fP,
or
\f(CWwindows\fP
(DOS/Windows: CR+LF);
or
\f(CWlf\fP,
\f(CWu\fP,
or
\f(CWunix\fP
(Unix: LF);
all case-insensitive.
.TP
.BR \-\-eos-delimit " | " \-e
Treats whitespace after an end-of-sentence character as a paragraph delimiter.
.TP
.BI \-\-eos-spaces \f1=\fPn "\f1 | \fP" "" \-E " n"
Specifies the number of spaces to emit or allow after an end-of-sentence
(default is 2).
.TP
.BI \-\-file \f1=\fPf "\f1 | \fP" "" \-f " f"
Reads from file
.I f
(default is standard input).
.TP
.BI \-\-file-name \f1=\fPf "\f1 | \fP" "" \-F " f"
Sets the file-name to
.I f
as if it were being read from
but still reads from standard input.
(This allows the file-name to be matched against a pattern
in a configuration file to use an alias
while still allowing
.B wrapc
to be used as part of a shell pipeline.)
.TP
.BR \-\-help " | " \-h
Prints a help message
for command-line options
and exits.
.TP
.BR \-\-markdown " | " \-u
Formats Markdown text.
(May be combined with either the
.B \-\-doxygen
or
.B \-x
option.)
.TP
.BR \-\-no-config " | " \-C
Suppresses reading of any configuration file,
even one explicitly specified via either
.BR \-\-config
or
.BR \-c .
.TP
.BR \-\-no-hyphen " | "  \-y
Suppresses special treatment of hyphens.
.TP
.BI \-\-output \f1=\fPf "\f1 | \fP" "" \-o " f"
Writes to file
.I f
(default is standard output).
.TP
.BI \-\-para-chars \f1=\fPs "\f1 | \fP" "" \-p " s"
Treats the given characters in
.I s
as paragraph delimiters.
.TP
.BI \-\-tab-spaces \f1=\fPn "\f1 | \fP" "" \-s " n"
Sets
.I tab-spaces
(the number of spaces a tab character should be considered the same as)
to
.I n
characters
(default is 8).
.TP
.BR \-\-title-line " | "  \-T
Treats the first line of every paragraph as a title
and puts it on a line by itself.
.TP
.BR \-\-version " | " \-v
Prints the version number to
.I stderr
and exits.
.TP
.BI \-\-width \f1=\fPn "\f1 | \fP" "" \-w " n"
Sets
.I line-width
to
.I n
characters
(default is 80).
Alternatively,
one of
\f(CWt\fP,
\f(CWterm\fP,
or
\f(CWterminal\fP
(case-insensitive)
sets
.I line-width
to the width of the controlling terminal window,
if any.
.SH EXIT STATUS
.PD 0
.IP 0
Success.
.IP 64
Command-line usage error.
.IP 66
Open file error.
.IP 69
A system resource is not available, e.g., a UTF-8 locale.
.IP 70
Internal software error.
(Please report the bug.)
.IP 71
System error.
.IP 73
Create file error.
.IP 74
I/O error.
.IP 78
Configuration file error.
.PD
.SH ENVIRONMENT
.TP
.B COLUMNS
The number of columns of the terminal on which
.B wrapc
is being run.
Used to get the terminal's width for the
.B \-\-width
or
.B \-w
option.
Takes precedence over the number of columns specified by the
.B TERM
variable.
.TP
.B HOME
The user's home directory:
used to locate the default configuration file.
If unset,
the home directory is obtained from the password database entry
for the effective user.
If that fails,
no default configuration file is read.
.TP
.B TERM
The type of the terminal on which
.B wrapc
is being run.
Used to get the terminal's width for the
.B \-\-width
or
.B \-w
option
(unless
.B COLUMNS
is set and exported).
.SH FILES
.TP
.B ~/.wraprc
The default configuration file.
A configuration file,
even one explicitly specified via either
.B \-\-config
or
.BR \-c ,
is neither actually checked for existence nor read
unless one of the
.BR \-\-alias ,
.BR \-a ,
.BR \-\-file ,
.BR \-f ,
.BR \-\-file-name ,
or
.B \-F
options
is specified
since it doesn't affect the result.
.SH EXAMPLE
While in
.BR vi ,
wrap the comment from the current line to the end of the paragraph:
.cS
!}wrapc --file-name='%'
.cE
The \f(CW%\fP argument to the
.B \-\-file-name
option is expanded by
.B vi
to be the file's path name.
This enables
.B wrapc
to use any applicable alias
from a configuration file, if any.
.P
To lessen typing,
the above can be mapped to a key sequence in
.BR vi 's
\f(CW.exrc\fP
file:
.cS
map `c !}wrapc --file-name='%'\f3^M\fP
.cE 0
.SH AUTHOR
Paul J. Lucas
.RI < paul@lucasmail.org >
.SH SEE ALSO
.BR indent (1),
.BR par (1),
.BR vi (1),
.BR wrap (1),
.BR ispunct (3),
.BR sysexits (3),
.BR wraprc (5)
.\" vim:set et sw=2 ts=2:
